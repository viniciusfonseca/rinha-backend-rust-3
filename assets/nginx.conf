worker_processes auto;

events {
    use epoll;
    worker_connections 1024;
    multi_accept on;
    accept_mutex off;
}
http {
    lua_shared_dict api_selector 1m;
    lua_socket_pool_size 512;
    
    tcp_nopush on;
    tcp_nodelay on;
    sendfile on;
    keepalive_timeout 30;
    keepalive_requests 2000;
    
    client_body_buffer_size 64k;
    client_max_body_size 512k;
    client_body_timeout 5s;
    client_header_timeout 5s;
    
    access_log off;

    upstream api {
        least_conn;
        server unix:/tmp/sockets/api01.sock;
        server unix:/tmp/sockets/api02.sock;
        keepalive 1024;
    }
    server {
        listen 80;
        location = /payments {
            content_by_lua_block {
                
                ngx.req.read_body()
                local body = ngx.req.get_body_data()

                ngx.status = 201
                ngx.header.content_length = 0
                ngx.eof()

                if not body or body == "" then
                    return
                end

                local body_len = string.len(body)
                
                local shared_dict = ngx.shared.api_selector
                local current = shared_dict:incr("current", 1, 0) or 1
                local api_num = (current % 2) + 1

                local socket_path = api_num == 1 and "unix:/tmp/sockets/api01.sock" or "unix:/tmp/sockets/api02.sock"
                local fallback_path = api_num == 1 and "unix:/tmp/sockets/api02.sock" or "unix:/tmp/sockets/api01.sock"

                ngx.timer.at(0, function (premature)
                    if premature then return end
                    
                    local sock = ngx.socket.tcp()
                    sock:settimeouts(250, 500, 500)
                    
                    local ok = sock:connect(socket_path)
                    if not ok then
                        ok = sock:connect(fallback_path)
                    end
                    
                    if ok then
                        sock:send(string.format(
                            "POST /payments HTTP/1.1\r\nHost: localhost\r\nContent-Type: application/json\r\nContent-Length: %d\r\nConnection: keep-alive\r\n\r\n%s",
                            body_len, body
                        ))
                    end
                    sock:close()
                end)
            }
        }
        location / {
            proxy_buffering on;
            proxy_set_header Connection "";
            proxy_http_version 1.1;
            proxy_pass http://api;
        }
    }
}